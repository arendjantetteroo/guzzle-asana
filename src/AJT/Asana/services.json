{
    "name": "Asana",
    "apiVersion": "2013-03-29",
    "baseUrl": "https://app.asana.com/api/1.0",
    "description": "Asana API",
    "operations": {
        "abstract": {
            "httpMethod": "GET",
            "parameters": {
                "Content-Type": {
                    "location": "header",
                    "default": "application/json"
                },
                "opt_fields": {
                    "location": "query",
                    "required": false,
                    "type": "string"
                },
                "opt_expand": {
                    "location": "query",
                    "required": false,
                    "type": "string"
                }
            }
        },
        "GetWorkspaces": {
            "extends": "abstract",
            "uri": "workspaces",
            "summary": "Showing available workspaces"
        },
        "RenameWorkspace": {
            "httpMethod": "PUT",
            "uri": "workspaces/{workspace-id}",
            "summary": "Updating an existing workspace"
        },
        "GetUsers": {
            "extends": "abstract",
            "uri": "users",
            "summary": "Showing all users in all workspaces"
        },
        "GetUsersWithEmail": {
            "extends": "abstract",
            "uri": "users?opt_fields=name,email",
            "summary": "Showing all users in all workspaces with email addresses"
        },
        "GetUser": {
            "extends": "abstract",
            "uri": "users/{user-id}",
            "summary": "Show a single user",
            "parameters": {
                "user-id": {
                    "location": "uri",
                    "description": "User ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "GetUserMe": {
            "extends": "abstract",
            "uri": "users/me",
            "summary": "Show a single user that is me"
        },
        "GetUsersInWorkspace": {
            "extends": "abstract",
            "uri": "workspaces/{workspace-id}/users",
            "summary": "Show all users in a single workspace",
            "parameters": {
                "workspace-id": {
                    "location": "uri",
                    "description": "Workspace ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "GetTasksForProject": {
            "extends": "abstract",
            "uri": "projects/{project-id}/tasks",
            "summary": "Gets a list of Tasks for a project",
            "parameters": {
                "project-id": {
                    "location": "uri",
                    "description": "Project ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "GetProjectsForTask": {
            "extends": "abstract",
            "uri": "tasks/{task-id}/projects",
            "summary": "Gets a list of Projects for a task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
         "AddProjectToTask": {
            "httpMethod": "POST",
            "uri": "tasks/{task-id}/addProject",
            "summary": "Add a project to a task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                },
                "project": {
                    "location": "postField",
                    "description": "Project ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
         "RemoveProjectFromTask": {
            "httpMethod": "POST",
            "uri": "tasks/{task-id}/removeProject",
            "summary": "Remove a project from a task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                },
                "project": {
                    "location": "postField",
                    "description": "Project ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "GetTagsForTask": {
            "extends": "abstract",
            "uri": "tasks/{task-id}/tags",
            "summary": "Gets a list of Tags for a task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "AddTagToTask": {
            "httpMethod": "POST",
            "uri": "tasks/{task-id}/addTag",
            "summary": "Add a tag to a task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                },
                "tag": {
                    "location": "postField",
                    "description": "Tag ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
         "RemoveTagFromTask": {
            "httpMethod": "POST",
            "uri": "tasks/{task-id}/removeTag",
            "summary": "Remove a tag from a task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                },
                "tag": {
                    "location": "postField",
                    "description": "Tag ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "GetTasksInWorkspace": {
            "extends": "abstract",
            "uri": "tasks?workspace={workspace-id}&assignee=me",
            "summary": "Gets a list of Tasks for Workspace assigned to me",
            "parameters": {
                "workspace-id": {
                    "location": "uri",
                    "description": "Workspace ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "GetTask": {
            "extends": "abstract",
            "uri": "tasks/{task-id}",
            "summary": "Showing a specific task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "CreateTask": {
            "httpMethod": "POST",
            "uri": "tasks",
            "summary": "Creating a new task",
            "parameters": {
                "assignee": {
                    "location": "postField",
                    "type": ["string","integer"],
                    "required": false
                },
                "assignee_status": {
                    "location": "postField",
                    "type": "string",
                    "enum": ["inbox", "today", "upcoming", "later"],
                    "required": false,
                    "description": "Scheduling status of this task for the user it is assigned to. "
                },
                "followers": {
                    "location": "postField",
                    "type": "array",
                    "required": false
                },
                "name": {
                    "location": "postField",
                    "type": "string"
                },
                "notes": {
                    "location": "postField",
                    "type": "string",
                    "required": false
                },
                "workspace": {
                    "location": "postField",
                    "type": "integer",
                    "required": true
                },
                "due_on": {
                    "required": false,
                    "location": "postField",
                    "type": "string"
                },
                "completed":{
                    "required": false,
                    "location": "postField",
                    "type": "integer"
                }
            }
        },
        "UpdateTask": {
            "httpMethod": "PUT",
            "uri": "tasks/{task-id}",
            "summary": "Updating an existing task",
            "responseNotes": "A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged. When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task. This method returns the complete updated task record, described above.",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true
                },
                "assignee": {
                    "location": "postField",
                    "type": ["string","integer"],
                    "required": false
                },
                "assignee_status": {
                    "location": "postField",
                    "type": ["string"],
                    "required": false,
                    "description": "Scheduling status of this task for the user it is assigned to. One of the following values: inbox   In the inbox. later   Scheduled for later. today   Scheduled for today. upcoming    Marked as upcoming."
                },
                "followers": {
                    "location": "postField",
                    "type": "array",
                    "required": false
                },
                "name": {
                    "location": "postField",
                    "type": "string",
                    "required": false
                },
                "notes": {
                    "location": "postField",
                    "type": "string",
                    "required": false
                },
                "workspace": {
                    "location": "postField",
                    "type": "integer",
                    "required": false
                },
                "due_on": {
                    "required": false,
                    "location": "postField",
                    "type": "string"
                },
                "completed":{
                    "required": false,
                    "location": "postField",
                    "type": "integer"
                }
            }
        },
        "DeleteTask": {
            "extends": "abstract",
            "httpMethod": "DELETE",
            "uri": "tasks/{task-id}",
            "summary": "Deleting a specific task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "GetSubTasks": {
            "extends": "abstract",
            "uri": "tasks/{task-id}/subtasks",
            "summary": "Showing subtasks of a specific task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "CreateSubTask": {
            "httpMethod": "POST",
            "uri": "tasks/{parent-id}/subtasks",
            "summary": "Creating a new subtask",
            "parameters": {
                "parent-id": {
                    "location": "uri",
                    "description": "Task ID of parent to add this task to",
                    "required": true,
                    "type": "integer"
                },
                "assignee": {
                    "location": "postField",
                    "type": ["string","integer"],
                    "required": false
                },
                "assignee_status": {
                    "location": "postField",
                    "type": "string",
                    "enum": ["inbox", "today", "upcoming", "later"],
                    "required": false,
                    "description": "Scheduling status of this task for the user it is assigned to. "
                },
                "followers": {
                    "location": "postField",
                    "type": "array",
                    "required": false
                },
                "name": {
                    "location": "postField",
                    "type": "string"
                },
                "notes": {
                    "location": "postField",
                    "type": "string",
                    "required": false
                },
                "workspace": {
                    "location": "postField",
                    "type": "integer",
                    "required": true
                },
                "due_on": {
                    "required": false,
                    "location": "postField",
                    "type": "string"
                },
                "completed":{
                    "required": false,
                    "location": "postField",
                    "type": "integer"
                }
            }
        },
        "SetSubTaskParent": {
            "httpMethod": "POST",
            "uri": "tasks/{task-id}/setParent",
            "summary": "Set a parent for a task (make the task a subtask of the given parent)",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID of task to add a parent to",
                    "required": true,
                    "type": "integer"
                },
                "parent": {
                    "location": "postField",
                    "description": "Task ID of parent to add this task to, use 'null' with quotes to remove parent.",
                    "required": true,
                    "type": ["integer", "string"]
                }
            }
         },
         "GetTaskStories": {
            "extends": "abstract",
            "uri": "tasks/{task-id}/stories",
            "summary": "Showing all stories of a specific task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "GetProjectStories": {
            "extends": "abstract",
            "uri": "projects/{project-id}/stories",
            "summary": "Showing all stories of a specific project",
            "parameters": {
                "project-id": {
                    "location": "uri",
                    "description": "Project ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "GetStory": {
            "extends": "abstract",
            "uri": "stories/{story-id}",
            "summary": "Showing a single story",
            "parameters": {
                "story-id": {
                    "location": "uri",
                    "description": "Story ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "AddTaskComment": {
            "httpMethod": "POST",
            "uri": "tasks/{task-id}/stories",
            "summary": "Comment on a task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                },
                "text":{
                    "required": true,
                    "location": "postField",
                    "type": "string"
                }
            }
        },
        "AddProjectComment": {
            "httpMethod": "POST",
            "uri": "projects/{project-id}/stories",
            "summary": "Comment on a task",
            "parameters": {
                "project-id": {
                    "location": "uri",
                    "description": "Project ID",
                    "required": true,
                    "type": "integer"
                },
                "text":{
                    "required": true,
                    "location": "postField",
                    "type": "string"
                }
            }
        },
        "CreateProject": {
            "httpMethod": "POST",
            "uri": "projects",
            "summary": "Create a new project",
            "parameters": {
                "name": {
                    "location": "postField",
                    "type": "string"
                },
                "notes": {
                    "location": "postField",
                    "type": "string",
                    "required": false
                },
                "workspace": {
                    "location": "postField",
                    "type": "integer",
                    "required": true
                },
                "team": {
                    "location": "postField",
                    "type": "integer",
                    "required": false,
                    "description": "If the workspace for your project is an organization, you must also supply a team to share the project with."
                }
            }
        },
        "GetProject": {
            "extends": "abstract",
            "uri": "projects/{project-id}",
            "summary": "Get a single project",
            "parameters": {
                "project-id": {
                    "location": "uri",
                    "type": "integer"
                }
            }
        },
         "UpdateProject": {
            "httpMethod": "PUT",
            "uri": "projects/{project-id}",
            "summary": "Updating an existing project",
            "responseNotes": "This method modifies the fields of a project provided in the request, then returns the full updated record.",
            "parameters": {
                "project-id": {
                    "location": "uri",
                    "description": "Project ID",
                    "required": true,
                    "type": "integer"
                },
                "name": {
                    "location": "postField",
                    "type": "string",
                    "required": false
                },
                "notes": {
                    "location": "postField",
                    "type": "string",
                    "required": false
                },
                "archived": {
                    "location": "postField",
                    "description": "archive this project",
                    "type" : "boolean",
                    "required": false
                }
            }
        },
         "DeleteProject": {
            "extends": "abstract",
            "httpMethod": "DELETE",
            "uri": "projects/{project-id}",
            "summary": "Deleting a specific project",
            "parameters": {
                "project-id": {
                    "location": "uri",
                    "description": "Project ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "GetProjects": {
            "extends": "abstract",
            "uri": "projects",
            "summary": "Get all archived projects",
            "parameters": {
                "archived": {
                    "location": "query",
                    "description": "Archived projects",
                    "type" : "boolean",
                    "required": false
                }
            }
        },
        "GetProjectsInWorkspace": {
            "extends": "abstract",
            "uri": "workspaces/{workspace-id}/projects",
            "summary": "Get all projects in this workspace",
            "parameters": {
                "workspace-id": {
                    "location": "uri",
                    "description": "Workspace id",
                    "type" : "integer",
                    "required": true
                },
                "archived": {
                    "location": "query",
                    "description": "Archived projects",
                    "type" : "boolean",
                    "required": false
                }
            }
        },
        "AddTaskFollowers": {
            "httpMethod": "POST",
            "uri": "tasks/{task-id}/addFollowers",
            "summary": "Add followers to a task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                },
                "followers":{
                    "required": true,
                    "location": "postField",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "RemoveTaskFollowers": {
            "httpMethod": "POST",
            "uri": "tasks/{task-id}/removeFollowers",
            "summary": "Add followers to a task",
            "parameters": {
                "task-id": {
                    "location": "uri",
                    "description": "Task ID",
                    "required": true,
                    "type": "integer"
                },
                "followers":{
                    "required": true,
                    "location": "postField",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "CreateTag": {
            "httpMethod": "POST",
            "uri": "projects",
            "summary": "Create a new project",
            "parameters": {
                "name": {
                    "location": "postField",
                    "type": "string"
                },
                "notes": {
                    "location": "postField",
                    "type": "string",
                    "required": false
                },
                "color": {
                    "location": "postField",
                    "type": "string",
                    "description": "Color of the tag. Must be either null or one of: dark-pink, dark-green, dark-blue, dark-red, dark-teal, dark-brown, dark-orange, dark-purple, dark-warm-gray, light-pink, light-green, light-blue, light-red, light-teal, light-yellow, light-orange, light-purple, light-warm-gray",
                    "enum": ["dark-pink", "dark-green", "dark-blue", "dark-red","dark-teal","dark-brown","dark-orange","dark-purple","dark-warm-gray","light-pink","light-green","light-blue","light-red","light-teal","light-yellow","light-orange","light-purple","light-warm-gray"],
                    "required": false
                },
                "workspace": {
                    "location": "postField",
                    "type": "integer",
                    "required": true
                }
            }
        },
        "GetTag": {
            "extends": "abstract",
            "uri": "projects/{tag-id}",
            "summary": "Get a single tag (project)",
            "parameters": {
                "tag-id": {
                    "location": "uri",
                    "type": "integer",
                    "description": "Tag ID"
                }
            }
        },
         "UpdateTag": {
            "httpMethod": "PUT",
            "uri": "projects/{tag-id}",
            "summary": "Updating an existing tag",
            "responseNotes": "This method modifies the fields of a tag provided in the request, then returns the full updated record.",
            "parameters": {
                "tag-id": {
                    "location": "uri",
                    "description": "Tag ID",
                    "required": true
                },
                "name": {
                    "location": "postField",
                    "type": "string",
                    "required": false
                },
                "notes": {
                    "location": "postField",
                    "type": "string",
                    "required": false
                }
            }
        },
         "GetTasksForTag": {
            "extends": "abstract",
            "uri": "tags/{tag-id}/tasks",
            "summary": "Gets a list of Tasks for a tag",
            "parameters": {
                "tag-id": {
                    "location": "uri",
                    "description": "Tag ID",
                    "required": true,
                    "type": "integer"
                }
            }
        },
        "GetTags": {
            "extends": "abstract",
            "uri": "tags",
            "summary": "Get all tags"
        },
        "GetTagsInWorkspace": {
            "extends": "abstract",
            "uri": "workspaces/{workspace-id}/tags",
            "summary": "Get all tags in this workspace",
            "parameters": {
                "workspace-id": {
                    "location": "uri",
                    "description": "Workspace id",
                    "type" : "integer",
                    "required": true
                }
            }
        },
        "GetTeams": {
            "extends": "abstract",
            "uri": "organizations/{organization-id}/teams",
            "summary": "Get all teams in this organization",
            "parameters": {
                "organization-id": {
                    "location": "uri",
                    "description": "Organization id",
                    "type" : "integer",
                    "required": true
                }
            }
        }
    }
}